// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EquipmentType {
  WEAPON
  HELMET
  CHESTPLATE
  LEGGINGS
  GLOVES
}

enum NotificationType {
  FRIENDLIST
  LOBBY
  GUILD
}

enum HeroClass {
  MAGE
  BERSERKER
  PRIEST
  ROGUE
  PALADIN
}

enum Rarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
  RELIC
}

model Inventory {
  id        Int @id @default(autoincrement())
  userId    Int
  stackSize Int

  equipmentId Int?
  itemId      Int?

  owner     User       @relation(fields: [userId], references: [id])
  equipment Equipment? @relation(fields: [equipmentId], references: [id])
  item      Item?      @relation(fields: [itemId], references: [id])
}

model Statistics {
  id         Int         @id @default(autoincrement())
  level      Int
  vitality   Int
  strength   Int
  defense    Int
  power      Int
  resistance Int
  precision  Int
  Equipment  Equipment[]
  Character  Character[]
}

model Item {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String
  isConsomable Boolean
  Inventory    Inventory[]
}

model EquipmentBase {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String
  rarity        Rarity
  heroClass     HeroClass?
  equipmentType EquipmentType
  Equipment     Equipment[]
}

model Equipment {
  id              Int @id @default(autoincrement())
  equipmentBaseId Int
  statisticsId    Int

  equipmentBase EquipmentBase @relation(fields: [equipmentBaseId], references: [id])
  statistics    Statistics    @relation(fields: [statisticsId], references: [id])
  inventory     Inventory[]

  characterHelmet     Character[] @relation("helmet")
  characterChestplate Character[] @relation("chestplate")
  characterGloves     Character[] @relation("gloves")
  characterLeggings   Character[] @relation("leggings")
  characterWeapon     Character[] @relation("weapon")
}

model Friend {
  userId   Int
  friendId Int
  user     User @relation("user", fields: [userId], references: [id])
  friend   User @relation("friend", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model Character {
  id            Int       @id @default(autoincrement())
  experience    Int       @default(0)
  statisticsId  Int
  firstSpellId  Int?
  secondSpellId Int?
  thirdSpellId  Int?
  fourthSpellId Int?
  helmetId      Int
  chestplateId  Int
  leggingsId    Int
  glovesId      Int
  weaponId      Int
  heroClass     HeroClass
  gold          Int?      @default(0)
  crystal       Int?      @default(0)

  statistics Statistics @relation(fields: [statisticsId], references: [id])

  helmet     Equipment @relation("helmet", fields: [helmetId], references: [id])
  chestplate Equipment @relation("chestplate", fields: [chestplateId], references: [id])
  leggings   Equipment @relation("leggings", fields: [leggingsId], references: [id])
  gloves     Equipment @relation("gloves", fields: [glovesId], references: [id])
  weapon     Equipment @relation("weapon", fields: [weaponId], references: [id])

  user User?
}

model User {
  id                   Int            @id @default(autoincrement())
  uid                  String         @unique
  name                 String         @unique
  mail                 String         @unique
  refreshToken         String?
  guildId              Int?
  characterId          Int?           @unique
  character            Character?     @relation(fields: [characterId], references: [id])
  guild                Guild?         @relation(fields: [guildId], references: [id])
  user                 Friend[]       @relation("user")
  friends              Friend[]       @relation("friend")
  lastCaloriesUpdate   DateTime       @default(now())
  notificationSent     Notification[] @relation("sender")
  notificationReceived Notification[] @relation("receiver")
  isGuildOwner         Boolean        @default(false)
  Inventory            Inventory[]
}

model Guild {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String @default("")
  users       User[]
}

model Notification {
  senderId   Int
  receiverId Int
  type       NotificationType
  sender     User             @relation("sender", fields: [senderId], references: [id])
  receiver   User             @relation("receiver", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId, type])
}

model Activity {
  id         Int      @id @default(autoincrement())
  userId     Int
  activityId String
  date       DateTime @default(now())
}
