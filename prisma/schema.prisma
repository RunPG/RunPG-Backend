// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: Guiler, hotel des ventes, demandes d'ami

// FIXME: Faire un enum à la place ?
// Voir avec les autres les différents types
model ItemType {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  inventories Inventory[]
}

// FIXME: Faire un inventaire pour les armes et les armures
// Toujours la même stack size ?
model Inventory {
  id         Int       @id @default(autoincrement())
  userId     Int
  itemTypeId Int
  stackSize  Int
  itemType   ItemType  @relation(fields: [itemTypeId], references: [id])
  owner      Character @relation(fields: [userId], references: [id])

  @@unique([userId, itemTypeId])
}

model Spell {
  id      Int       @id @default(autoincrement())
  classId Int       @unique
  name    String    @unique
  class   HeroClass @relation(fields: [classId], references: [id])

  userFirstSpell  Character[] @relation("firstSpell")
  userSecondSpell Character[] @relation("secondSpell")
  userThirdSpell  Character[] @relation("thirdSpell")
  userFourthSpell Character[] @relation("fourthSpell")
}

// FIXME: Faire un enum ?
model HeroClass {
  id      Int         @id @default(autoincrement())
  name    String      @unique
  weapons Weapon[]
  users   Character[]
  spells  Spell[]
}

// FIXME: inventaire
model Weapon {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  level       Int
  vitality    Int
  endurance   Int
  strength    Int
  defense     Int
  power       Int
  resistance  Int
  precision   Int
  agility     Int
  rarity      Int //OR STRING OR ENUM
  description String
  classId     Int
  heroClass   HeroClass   @relation(fields: [classId], references: [id])
  owners      Character[] @relation()
}

// FIXME: inventaire
model Armor {
  id               Int         @id @default(autoincrement())
  name             String      @unique
  level            Int
  vitality         Int
  endurance        Int
  strength         Int
  defense          Int
  power            Int
  resistance       Int
  precision        Int
  agility          Int
  rarity           Int //OR STRING OR ENUM ?
  description      String
  type             Int
  helmetOwners     Character[] @relation("helmet")
  chestplateOwners Character[] @relation("chestplate")
  leggingsOwners   Character[] @relation("leggings")
  glovesOwners     Character[] @relation("gloves")
}

model Friend {
  userId   Int
  friendId Int
  user     User @relation("user", fields: [userId], references: [id])
  friend   User @relation("friend", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

// FIXME: On démarre avec 4 spells ou moins ?
// Pareil pour l'équipement, et peut-on l'enlever (rien avoir en arme par exemple)
model Character {
  id            Int  @id @default(autoincrement())
  experience    Int  @default(0)
  vitality      Int
  endurance     Int
  strength      Int
  defense       Int
  power         Int
  resistance    Int
  precision     Int
  agility       Int
  firstSpellId  Int?
  secondSpellId Int?
  thirdSpellId  Int?
  fourthSpellId Int?
  helmetId      Int
  chestplateId  Int
  leggingsId    Int
  glovesId      Int
  weaponId      Int
  classId       Int

  firstSpell  Spell? @relation("firstSpell", fields: [firstSpellId], references: [id])
  secondSpell Spell? @relation("secondSpell", fields: [secondSpellId], references: [id])
  thirdSpell  Spell? @relation("thirdSpell", fields: [thirdSpellId], references: [id])
  fourthSpell Spell? @relation("fourthSpell", fields: [fourthSpellId], references: [id])

  helmet     Armor? @relation("helmet", fields: [helmetId], references: [id])
  chestplate Armor? @relation("chestplate", fields: [chestplateId], references: [id])
  leggings   Armor? @relation("leggings", fields: [leggingsId], references: [id])
  gloves     Armor? @relation("gloves", fields: [glovesId], references: [id])

  weapon    Weapon      @relation(fields: [weaponId], references: [id])
  class     HeroClass   @relation(fields: [classId], references: [id])
  inventory Inventory[]
  user      User?
}

// FIXME: Que ce passe t'il si un user est créé mais que le character n'est pas terminé ?
// Voir processus de création
model User {
  id                 Int        @id @default(autoincrement())
  name               String     @unique
  guildId            Int?
  characterId        Int?       @unique
  character          Character? @relation(fields: [characterId], references: [id])
  guild              Guild?     @relation(fields: [guildId], references: [id])
  user               Friend[]   @relation("user")
  friends            Friend[]   @relation("friend")
  lastCaloriesUpdate DateTime   @default(now())
}

// FIXME: Add owner, name
model Guild {
  id          Int     @id @default(autoincrement())
  users       User[]
  description String?
}
